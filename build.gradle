ext {
  adpCoreVersion = project.hasProperty('adpCoreVersion') ? project.getProperty('adpCoreVersion') : '3.4-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.4-SNAPSHOT'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : 'https://nexus.adaptris.net/nexus/content/repositories/snapshots'
  componentName='Interlok Template'
  slf4jVersion = '1.7.29'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'ivy-publish'
apply plugin: 'jacoco'

sourceCompatibility = 1.7
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// In this section you declare where to find the dependencies of your project
repositories {
  maven { url "https://nexus.adaptris.net/nexus/content/groups/public" }
  maven {
    credentials {
      username repoUsername
      password repoPassword
    }
    url "https://nexus.adaptris.net/nexus/content/groups/private"
  }
  maven { url "https://nexus.adaptris.net/nexus/content/repositories/snapshots" }
  maven { url "https://nexus.adaptris.net/nexus/content/repositories/releases" }
}


configurations {
  javadoc {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
}

dependencies {
  compile ("com.adaptris:adp-core:$adpCoreVersion") { changing= true}
  compile ("org.slf4j:slf4j-api:$slf4jVersion")

  testCompile ('junit:junit:4.12')
  testCompile ("com.adaptris:adp-stubs:$adpCoreVersion") { changing= true}

  javadoc("com.adaptris:adp-core-apt:$adpCoreVersion") { changing= true}
}

task adpInit << {
  println "Making directory: ${sourceSets.main.java.srcDirs}"
  file("${sourceSets.main.java.srcDirs[0]}").mkdirs()
  println "Making directory: ${sourceSets.main.resources.srcDirs}"
  file("${sourceSets.main.resources.srcDirs[0]}").mkdirs()
  println "Making directory: ${sourceSets.test.java.srcDirs}"
  file("${sourceSets.test.java.srcDirs[0]}").mkdirs()
  println "Making directory: ${sourceSets.test.resources.srcDirs}"
  file("${sourceSets.test.resources.srcDirs[0]}").mkdirs()
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
    }
  }
}

javadoc {
  configure(options) {
    links = [
            "http://development.adaptris.com/javadocs/v3-snapshot/Interlok-API/",
            "http://development.adaptris.net/javadocs/v3-snapshot/Interlok-Common/",
    ]
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
  }
}

jacoco {
  toolVersion="0.7.4.201502262128"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task examplesJar(type: Jar, dependsOn: test) {
  classifier = 'examples'
  from new File(buildDir, '/examples')
}

task javadocZip(type: Zip, dependsOn: javadoc) {
  appendix 'javadoc'
  from javadoc.destinationDir
  into "docs/optional/${rootProject.name}"
}

task examplesZip(type: Zip, dependsOn:test) {
  appendix 'examples'
  from new File(buildDir, '/examples')
  into "example-xml/optional/${rootProject.name}"
}

task pomFile {
  ext.file = new File (new File (new File(buildDir, 'publications'), 'pom'), 'pom.xml')
  outputs.files file
  doLast {
    file.getParentFile().mkdirs()
    pom{}.writeTo(file)
  }
}

artifacts {
  archives javadocJar
  archives examplesJar
  archives javadocZip
  archives examplesZip
}

publishing {
  repositories {
    ivy {
      url "${rootProject.buildDir}/repo"
      layout 'pattern' , {
        artifact  '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])'
        ivy       '[organisation]/[module]/[revision]/ivy-[revision].xml'
        m2compatible = true
      }
    }
  }
  publications {
    ivy(IvyPublication) {
      
      descriptor.withXml {
        def configuration = asNode().configurations[0]
        configuration.appendNode('conf', [name: 'examples',visibility: 'public'])
        configuration.appendNode('conf', [name: 'javadoc' ,visibility: 'public'])
      }

      artifact(pomFile.file) {
        type       'pom'
        extension  'pom'
        builtBy     pomFile
      }

      from components.java

      artifact(javadocJar){
        classifier "javadoc" 
      }
      
      artifact(examplesJar){
        classifier "examples"
      }
      if (file(examplesZip.archivePath).exists()) { 
        artifact(examplesZip) {
          name "$examplesZip.baseName-$examplesZip.appendix"
          type "$examplesZip.appendix"
          conf "$examplesZip.appendix"
        }
      }
      
      if (file(javadocZip.archivePath).exists()) { 
        artifact(javadocZip) {
          name "$javadocZip.baseName-$javadocZip.appendix"
          type "$javadocZip.appendix"
          conf "$javadocZip.appendix"
        }
      }
    }
  }
}
